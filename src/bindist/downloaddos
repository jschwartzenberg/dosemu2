#!/usr/bin/python3

import argparse
import os
import shutil
import subprocess
import sys
from pathlib import Path

FREEDOS_DEFAULT_MIRROR = 'https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files'
TOSEC_IBM_PC_MIRROR    = 'https://archive.org/download/IBM_PC_Compatibles_TOSEC_2012_04_23/IBM_PC_Compatibles_TOSEC_2012_04_23.zip'
OPENLINUX_MIRROR       = 'ftp://ftp.nvg.org/pub/mirrors/metalab.unc.edu/distributions/caldera'

FREEDOS_BASE_URL = FREEDOS_DEFAULT_MIRROR + '/distributions'
FREEDOS11_URL = FREEDOS_BASE_URL + '/1.1'
FREEDOS12_URL = FREEDOS_BASE_URL + '/1.2'
FREEDOS_ARCHIVES = ['kernel', 'command', 'assign', 'attrib', 'choice',
                   'comp', 'debug', 'defrag', 'deltree', 'diskcomp',
                   'diskcopy', 'display', 'edit', 'edlin', 'exe2bin',
                   'fc', 'find', 'format', 'help', 'label', 'mem',
                   'mode', 'more', 'move', 'nansi', 'replace', 'share',
                   'shsucdx', 'sort', 'swsubst', 'tree', 'xcopy']

BWBASIC_URL = FREEDOS_DEFAULT_MIRROR + '/devel/basic/bwbasic/bwb220ax.zip'
LIB_URL     = FREEDOS_DEFAULT_MIRROR + '/devel/tools/lib-sk32.zip'
TOUCH_URL   = FREEDOS_DEFAULT_MIRROR + '/util/file/touch/1.44/touch144.zip'
WCD_URL     = FREEDOS_DEFAULT_MIRROR + '/util/user/wcd/wcd530b.zip'

TMP_DIR = '/tmp/' + sys.argv[0] + '-' + os.environ['USER'] + '-' + str(os.getpid())

destination = ''

def download_file(source, destination_file):
    if Path(destination_file).is_file():
        print(destination_file + ' found, not redownloading')
    else:
        print('Downloading ' + source + '...')
        subprocess.run(['wget', '--quiet', source, '-O ' + destination_file])

def download_FREEDOS_ARCHIVES(freedos_url):
    print('Downloading FreeDOS...')
    for filename in FREEDOS_ARCHIVES:
        download_file(freedos_url + '/repos/base/' + filename + '.zip', destination + '/' + filename + '.zip')

    download_file(BWBASIC_URL, destination + '/bwbasic.zip')
    download_file(LIB_URL,     destination + '/lib.zip')
    download_file(TOUCH_URL,   destination + '/touch.zip')
    download_file(WCD_URL,     destination + '/wcd.zip')

    print('Downloading done')

def extract_7z(archive, filename, destination_dir):
    print('Extracting ' + filename)
    subprocess.run(['7z', 'e', archive, filename, '-o' + destination_dir, '-y', '-ssc-'])

def download_and_extract(imgurl, imgcnt):
    os.mkdir(TMP_DIR)
    for i in range(1, imgcnt):
        download_file(imgurl % i, TMP_DIR + '/disk' + i + '.zip')
        os.mkdir(TMP_DIR + '/ex' + i)
        extract_7z(TMP_DIR + '/disk' + i + '.zip', '', TMP_DIR + '/ex' + i)
        image = TMP_DIR + '/ex' + i + '/' + Path(TMP_DIR + '/ex' + i).iterdir()[0]
        subprocess.run(['mcopy', '-sn', '-i', image, '::*', destination], env={"PATH": os.environ['PATH'], "MTOOLS_LOWER_CASE": '1'})
    shutil.rmtree(TMP_DIR)

def verify_tool(executable, package):
    if subprocess.getstatusoutput(['which', executable]) == 0:
        print('Please install ' + package + ' and make sure that ' + executable + ' is on your PATH.')
        sys.exit(1)

def verify_system():
    verify_tool('wget', 'wget')
    verify_tool('7z', '7zip')
    verify_tool('mcopy', 'mtools')

def verify_noexistinginstall():
    if os.listdir(destination) != []:
        print('There is a already an existing set of DOS installation files in ' + destination + '.')
        sys.exit(1)

def download_dos(dos_flavour):
    os.mkdir(destination)

    if dos_flavour == 'freedos12':
        download_FREEDOS_ARCHIVES(FREEDOS12_URL)
        return
    if dos_flavour == 'freedos11':
        download_FREEDOS_ARCHIVES(FREEDOS11_URL)
        return
    if dos_flavour == 'msdos622':
        download_and_extract(TOSEC_IBM_PC_MIRROR + '/IBM%%20PC%%20Compatibles%%20%%5BTOSEC%%5D%%2FIBM%%20PC%%20Compatibles%%20-%%20Operating%%20Systems%%20-%%20%%5BIMA%%5D%%20%%28TOSEC-v2011-01-06_CM%%29%%2FMicrosoft%%20MS-DOS%%20v6.22%%20%%281994%%29%%28Microsoft%%29%%28Disk%%20%d%%20of%%203%%29.zip', 3, destination)
        return
    if dos_flavour == 'opendos702':
        download_file(OPENLINUX_MIRROR + '/updates/OpenLinux/1.3/current/SRPMS/opendos-hdimage-7.02-4.src.rpm $DESTINATION/opendos-hdimage-7.02-4.src.rpm')
        if subprocess.getoutput('sha512sum < $DESTINATION/opendos-hdimage-7.02-4.src.rpm') == '174f7c12e07c301189a59a53ba99912a8c3f2579319984cc2a26d25a4e9b27a6227e8b18516c88525794cd260112528f7e6957c5438be6e9a345c9dcbb01ef27  -':
            print('Verified non-secure download ' + destination + '/opendos-hdimage-7.02-4.src.rpm')
        else:
            print('There was a problem downloading OpenDOS. The downloaded archive could not be verified.')
            sys.exit(1)

verify_system()

parser = argparse.ArgumentParser()
parser.add_argument("-l", "--list", help="List available DOSs", action="store_true")
parser.add_argument("-d", "--download", help="Download specified DOS", type=str)
# parser.add_argument("destination", help="installation destination", default=os.environ['HOME'] + '/.dosemu/drive_c')

args = parser.parse_args()
if args.list:
    print('freedos12 FreeDOS 1.2 (2016)')
    print('freedos11 FreeDOS 1.1 (2011)')
    print('msdos622 Microsoft MS-DOS v6.22 (1994)')
    print('opendos702 Caldera OpenDOS 7.02 (1997)')
    sys.exit(0)

if args.download:
    destination = args.destination
    download_dos(args.download)
